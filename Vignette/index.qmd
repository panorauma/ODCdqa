---
title: "ODCdqa"
subtitle: "Open Data Commons SCI/TBI Data Quality App"
author: 
  - Kenneth A Fond, Hannah Radabaugh, Romana Vavrek, Karim Fouad
  - Jeffrey S Grethe, Maryann E Martone, Adam R Ferguson, Abel Torres-Espin
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 6
    code-fold: false
    code-overflow: wrap
    code-copy: hover
    self-contained: true
execute: 
  eval: false
  echo: false
---

```{r}
library(DiagrammeR)
```

## Introduction

ODCdqa is a collection of tools created by the ODC team to facilitate and simplify the process of preparing datasets and data dictionaries for upload to the ODC platform.

## Quick Start

ODCdqa is offered in 3 versions:

*click on link to jump to respective section*

1. [Website](#website): Quality Checks, graphical interface
1. [Package](#package): Quality Checks, no graphical interface
1. [Docker Image](#docker-image): Quality Checks + Exporatory Data Report, graphical interface

### Website

1. Navigate to [https://odcdqa.onrender.com](https://odcdqa.onrender.com)
2. In `Start Here` tab, click `Begin` button
3. Select ODC community
4. Click on `Browse` button under Dataset to upload dataset (in .csv format)
5. Click on `Browse` button under Data dic to upload dataset (in .csv format)
6. Click on `Next` button
7. In `ODC data checks` tab, click `Run Checks` to start checks

### Package

Source code: [ODCdqaFunctions](https://github.com/panorauma/ODCdqaFunctions)

#### Install

To install, run the following lines of code in R console:

```{r}
#| echo: true
install.packages("devtools")

devtools::install_github("panorauma/ODCdqaFunctions")
```

To install the required R packages, run the following line in R console:

```{r}
#| echo: true
source("requirements.R")
```

To install the required Python packages, run one of the following in terminal:

macOS/Linux

```{bash}
#| echo: true
python3 -m pip install -r requirements.txt
```

Windows

```{bash}
#| echo: true
python pip3 install -r requirements.txt
```

### Docker Image

Source code: [ODCdqa Docker Image](https://github.com/orgs/panorauma/packages?repo_name=ODCdqa)

***Note:*** [Docker](https://www.docker.com/) is required

#### arm64 or aarch64 Architecture

The Docker image is built for the x86_64 aka amd64 architecture. As such, mileage will vary for devices with non-x86_64 architecture such as ARM. arm64 and aarch64 are both a part of ARM architecture, they just have different names.

This is because the base layer of the Docker image (rocker/shiny-verse) is only offered for amd64 architecture. ARM architecture support will be added once an ARM version of rocker/shiny-verse becomes available.

#### Install

To install/run the Docker image after Docker application is installed:

```{bash}
#| echo: true
docker run --name odcdqa -it -p 3838:3838 ghcr.io/panorauma/dqa:main
```

Command arguments:

- `docker run` = start Docker image
- `--name odcdqa` = rename the container to `odcdqa`
- `-p 3838:3838` = forward port 3838 in container to 3838 on host machine, the first number is host port, second is container port
- `ghcr.io/panorauma/dqa:main` = where Docker image is located

#### Interact with Graphical User Interface

In browser window, navigate to localhost using `http://localhost:3838` or `http://localhost:PORT` if changed in docker run command

#### Generate Exploratory Data Report

To generate an interactive data exploration page from the uploaded dataset and data dictionary:

1. Navigate to the "Data Explorer" tab
1. Click "Generate EDA"

***Note:*** The time it takes to complete this process will depend on size of uploaded dataset.

### Advanced Use Cases

For full functionality, ODCdqa requires R (version 4 and above) along with Python (3.8 and above) installed locally.

- packages listed in `setup/requirements.R` and `setup/requirements.txt` are required for R and Python respectively

#### Data Quality Checks Only

Basic template for performing data quality checks on a single dataset with corresponding data dictionary.

```{r}
#| echo: true
#import dataset & data dictionary
dataset <- read_csv("PATH")
data_dict <- read_csv("PATH")

#store output as lists nested within list
all <- validate_odc(
  dataset = dataset,
  datadic = data_dict,
  str_checks = "all",
  sch_checks = "all"
)

#display output in table
render_check_table(structure_checks = all$structure,
  schema_checks = all$schema)
```

#### EDA Report Only

Basic template for creating EDA report html file.

```{bash}
#| echo: true

#import dependencies
import os
import sys
import subprocess
import pandas as pd
from ydata_profiling import ProfileReport

orig_filename = "FILENAME"

#import dataset + data dict
df_data = pd.read_csv("DATASET")
df_dic = pd.read_csv("DATADICT")

#create & save profile report as "Profile.html"
profile = df_data.profile_report(
    title="Profile Report for "+orig_filename,
    minimal = True,
    infer_dtypes=True,
    orange_mode=True,
    dataset={
        "description": "Profile Report for "+orig_filename
    },    
    correlations={
        "pearson": {"calculate": False},
        "spearman": {"calculate": False},
        "kendall": {"calculate": False},
        "phi_k": {"calculate": False},
        "cramers": {"calculate": False},
    },
    variables={
        "descriptions": df_dic.set_index("VariableName").to_dict()["Title"]
    }
)
profile.to_file(output_file="Profile.html",silent=False)
```

- `FILENAME` = dataset name
- `DATASET` = path to dataset, csv format
- `DATADICT` = path to data dictionary, csv format

## Functions

The sections below will list all functions used. Version-specific functions will be listed under a separate section.

### Core

The overall sequence of the core functions is as follows:

```{r}
#| eval: true
DiagrammeR::mermaid("
graph LR
  A{Import dataset} --> validate_structure
  B{Import data dictionary} --> validate_schema
  validate_structure --> validate_odc
  validate_schema --> validate_odc
  validate_odc --> checklist_to_df
  checklist_to_df --> render_check_table
  render_check_table --> C{Run app and display}
")
```

- Rhomboid = user actions
- Rectangle = functions coded into app

#### validate_odc

This function is a wrapper for the [`validate_structure`](#validate_structure) and [`validate_schema`](#validate_schema) functions, respectively. It will output a list object for the user to save into the global environment.

Argument(s):

- __dataset__: Default is `NULL`. Loads dataset directly from file.
- __datadic__: Default is `NULL`. Loads dataset directly from file.
- __dataset_path__: Passes dataset dataframe loaded into global environment into function.
- __datadic_path__: Passes data dictionary dataframe loaded into global environment into function.
- __str_checks__: Variables to use for structure checks. Is "all" for ODC-SCI but not for ODC-TBI.
- __sch_checks__: Variables to use for schema checks. Is "all" for ODC-SCI but not for ODC-TBI.

##### validate_structure

This function performs a structure check on the uploaded dataset and outputs a list object.

Structure checks include:

- missing headers
- duplicated headers
- blank rows and/or columns
- duplicated rows and/or columns

Argument(s):

- __dataset__: Passes dataset dataframe loaded into global environment into function.
- __str_checks__: Variables to use for structure checks. Is "all" for ODC-SCI but not for ODC-TBI.

##### validate_schema

This function performs a schema check on the data dictionary and outputs a list object.

Schema checks include:

- missing headers
- missing variable title
- missing variable description

Argument(s):

- __dataset__: Passes dataset dataframe from global environment into function.
- __datadic__: Passes data dictionary dataframe from global environment into function.
- __sch_checks__: Variables to use for schema checks. Is "all" for ODC-SCI but not for ODC-TBI.

#### checklist_to_df

Tidy results of checks into df to display in app

Argument(s):

- __check_list__: Results of structure/schema check.

#### empty_data_dict

Create empty data dict template (if no data dict uploaded)

Argument(s):

- __upload_dataset__: Dataframe of uploaded dataset csv file.

#### render_check_table

This function presents the results of [`validate_odc`](#validate_odc) as an interactive data table inside the application. The results are color-coded based on the following:

- Pass (<span style="color:#b6d7a8">color</span>): No changes are necessary.
- Fail (<span style="color:#e06666">color</span>): Changes are required.
- Warning (<span style="color:#ffa500">color</span>): Flag for user to double-check/pay close attention to output.

Argument(s):

- __structure_checks__: Results of structure_checks. Will be dataframe inside list of dataframes.
- __schema_checks__: Results of schema_checks. Will be dataframe inside list of dataframes.

#### first_char_letter

Checks whether the variable name starts off with a letter. Returns Pass or Fail.

Argument(s):

- __string__: Single string to perform check on.

#### var_other_symbols

Checks whether the variable name contains anything other than letters, digits, underscore, or period. Returns Pass or Fail.

Argument(s):

- __string__: Single string to perform check on.

### Miscellaneous

The functions below are not part of the core workflow or are depreciated. 

#### startApp

Argument(s):

Allows users of the package version to start application using a single line of code. Will automatically import required libraries for app to function.

- __loadReqPackages__: Starts app and loads all required libraries necessary for app to function. Default is `TRUE`.

##### library.dynam.unload

Used to install required libraries if they are not present in list of user's installed packages.

##### system.file

Used to install required libraries if they are not present in list of user's installed packages.

#### empty_data_dict

This function will generate a data dictionary template if a dataset is uploaded without an accompanying data dictionary. The user can then download and fill in this template.

Argument(s):

- __upload_dataset__: Passes dataset dataframe from global environment into function.

#### summary.odcCheck

Used for debugging purposes. Prints the results of [`validate_odc`](#validate_odc) inside the R console. Precursor to [`render_check_table`](#render_check_table).

## License

[MIT License](../LICENSE)

Copyright (c) 2022 The Regents of the University of California

## Issues/Suggestions

For any issues or suggestions, please contact the ODC Team via one of the following:

- Email: [odc-sci](info@odc-sci.org), [odc-tbi](info@odc-tbi.org)
- [GitHub](https://github.com/panorauma/ODCdqa)
